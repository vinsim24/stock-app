name: Build and Push Docker Images

on:
  push:
    branches: [ main ]
    paths-ignore:
      - '**.md'
      - 'docs/**'
      - '.gitignore'
      - 'LICENSE'
      - 'deploy.sh'
      - 'deploy.bat'
  pull_request:
    branches: [ main ]
    paths-ignore:
      - '**.md'
      - 'docs/**'
      - '.gitignore'
      - 'LICENSE'
      - 'deploy.sh'
      - 'deploy.bat'

env:
  DOCKER_USERNAME: vinsim24

jobs:
  # Job to check if we should skip build
  check-changes:
    runs-on: ubuntu-latest
    outputs:
      should-build: ${{ steps.check.outputs.should-build }}
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 2
        
    - name: Check for code changes
      id: check
      run: |
        # Get list of changed files
        CHANGED_FILES=$(git diff --name-only HEAD~1 HEAD)
        echo "Changed files: $CHANGED_FILES"
        
        # Check if any non-documentation files changed
        CODE_CHANGED=false
        for file in $CHANGED_FILES; do
          if [[ ! "$file" =~ \.(md|txt)$ ]] && \
             [[ ! "$file" =~ ^docs/ ]] && \
             [[ "$file" != ".gitignore" ]] && \
             [[ "$file" != "LICENSE" ]] && \
             [[ "$file" != "deploy.sh" ]] && \
             [[ "$file" != "deploy.bat" ]]; then
            CODE_CHANGED=true
            echo "Code file changed: $file"
            break
          fi
        done
        
        if [ "$CODE_CHANGED" = true ]; then
          echo "should-build=true" >> $GITHUB_OUTPUT
          echo "üèóÔ∏è Code changes detected - will build Docker images"
        else
          echo "should-build=false" >> $GITHUB_OUTPUT
          echo "üìù Only documentation changes detected - skipping Docker build"
        fi

  build-and-push:
    runs-on: ubuntu-latest
    needs: check-changes
    if: needs.check-changes.outputs.should-build == 'true'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: Login to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ env.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}
        
    - name: Extract metadata
      id: meta
      run: |
        echo "SHORT_SHA=${GITHUB_SHA::7}" >> $GITHUB_OUTPUT
        echo "DATE=$(date -u +'%Y-%m-%dT%H:%M:%SZ')" >> $GITHUB_OUTPUT
        
    - name: Build and push Backend
      uses: docker/build-push-action@v5
      with:
        context: ./backend
        platforms: linux/amd64,linux/arm64
        push: true
        tags: |
          ${{ env.DOCKER_USERNAME }}/stock-app-backend:latest
          ${{ env.DOCKER_USERNAME }}/stock-app-backend:${{ steps.meta.outputs.SHORT_SHA }}
        labels: |
          org.opencontainers.image.source=https://github.com/${{ github.repository }}
          org.opencontainers.image.created=${{ steps.meta.outputs.DATE }}
          org.opencontainers.image.revision=${{ github.sha }}
          
    - name: Build and push Frontend
      uses: docker/build-push-action@v5
      with:
        context: ./frontend
        platforms: linux/amd64,linux/arm64
        push: true
        tags: |
          ${{ env.DOCKER_USERNAME }}/stock-app-frontend:latest
          ${{ env.DOCKER_USERNAME }}/stock-app-frontend:${{ steps.meta.outputs.SHORT_SHA }}
        labels: |
          org.opencontainers.image.source=https://github.com/${{ github.repository }}
          org.opencontainers.image.created=${{ steps.meta.outputs.DATE }}
          org.opencontainers.image.revision=${{ github.sha }}
          
    - name: Build and push Frontend React
      uses: docker/build-push-action@v5
      with:
        context: ./frontend-react
        platforms: linux/amd64,linux/arm64
        push: true
        tags: |
          ${{ env.DOCKER_USERNAME }}/stock-app-frontend-react:latest
          ${{ env.DOCKER_USERNAME }}/stock-app-frontend-react:${{ steps.meta.outputs.SHORT_SHA }}
        labels: |
          org.opencontainers.image.source=https://github.com/${{ github.repository }}
          org.opencontainers.image.created=${{ steps.meta.outputs.DATE }}
          org.opencontainers.image.revision=${{ github.sha }}
          
    - name: Update deployment status
      run: |
        echo "‚úÖ Successfully built and pushed all Docker images!"
        echo "üì¶ Backend: ${{ env.DOCKER_USERNAME }}/stock-app-backend:latest"
        echo "üé® Frontend: ${{ env.DOCKER_USERNAME }}/stock-app-frontend:latest" 
        echo "‚öõÔ∏è React: ${{ env.DOCKER_USERNAME }}/stock-app-frontend-react:latest"
        echo "üè∑Ô∏è Tag: ${{ steps.meta.outputs.SHORT_SHA }}"
